package com.msaProjectMenu01.menu.service;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.msaProjectMenu01.core.util.Util;
import com.msaProjectMenu01.menu.model.Product;
import com.msaProjectMenu01.menu.repository.ProductRepository;

@Service
public class ProductService {

	@Value("${upload.path}")
	private String uploadFilePath;
	
	@Autowired
	private ProductRepository productRepository;
	
	// 상품조회
	public ResponseEntity<Map<String, Object>> getAllProducts() throws IOException {
		Map<String, Object> result = new HashMap<>();
		
		List<Product> list = productRepository.findAll();
		List<Product> resultList = new ArrayList<Product>();
		
		for(Product product : list) {
			String filePath = product.getFilePath();
			
			Product param = new Product();
			param.setProductId(product.getProductId());
			param.setProductNm(product.getProductNm());
			param.setAtm(product.getAtm());
			if(!"".equals(filePath)) {
				byte[] fileByte = Util.convertFileToByteArray(filePath);
				product.setImageData(fileByte);
				param.setImageData(fileByte);
			}
			
			
			resultList.add(param);
			//product.setFilePath("");
		}
		
		result.put("list", resultList);
		
		return ResponseEntity.ok(result);
	}
	
	// 상품등록
	public void createProduct(String productName, String productPrice, MultipartFile imageFile, String userId) throws Exception {
		
		String orginFileNm = imageFile.getOriginalFilename();
        String fileNm = Util.getUuid("", orginFileNm);
        String ext = "";
        if(orginFileNm.indexOf(".") > -1) {
        	ext = orginFileNm.substring(orginFileNm.indexOf(".")); 
        }
        
        // 디레토리가 없다면 생성
 		File dir = new File(uploadFilePath);
 		if (!dir.isDirectory()) {
 			dir.mkdirs();
 		}
        
        String saveFilePath = uploadFilePath + File.separator + fileNm + ext;
        
        File serverFile = new File(saveFilePath);
        imageFile.transferTo(serverFile);
        
        Product param = new Product();
        param.setProductNm(productName);
        param.setAtm(productPrice);
        param.setFileNm(fileNm);
        param.setOriginalFileNm(orginFileNm + ext);
        param.setFilePath(saveFilePath);
        param.setUserId(userId);
        
        
        productRepository.save(param);
	}
	
	// 상품삭제
	public void deleteProduct(Integer productId) {
		
		Optional<Product> product = productRepository.findById(productId);
		
		if (product.isPresent()) {
			// 이미지 삭제
			File file = new File(product.get().getFilePath());
			
			if(file.exists()) {
				file.delete();
			}			
			
			productRepository.deleteById(productId);
		}
	}
	
	// 상품 수정
	/*
	 * 기존 파일 삭제 -> 신규 파일 등록
	 * */
	public void productUpdate(String productName, String productPrice, MultipartFile imageFile, String userId, Integer productId) throws Exception {
		
		Optional<Product> product = productRepository.findById(productId);
		
		// 기존 이미지 삭제
		if (product.isPresent()) {
			// 이미지 삭제
			File file = new File(product.get().getFilePath());
			
			if(file.exists()) {
				file.delete();
			}
		}
		
		String orginFileNm = imageFile.getOriginalFilename();
        String fileNm = Util.getUuid("", orginFileNm);
        String ext = "";
        if(orginFileNm.indexOf(".") > -1) {
        	ext = orginFileNm.substring(orginFileNm.indexOf(".")); 
        }
        
        // 디레토리가 없다면 생성
 		File dir = new File(uploadFilePath);
 		if (!dir.isDirectory()) {
 			dir.mkdirs();
 		}
        
        String saveFilePath = uploadFilePath + File.separator + fileNm + ext;
        
        File serverFile = new File(saveFilePath);
        imageFile.transferTo(serverFile);
        
        Product param = new Product();
        param.setProductId(productId);
        param.setProductNm(productName);
        param.setAtm(productPrice);
        param.setFileNm(fileNm);
        param.setOriginalFileNm(orginFileNm + ext);
        param.setFilePath(saveFilePath);
        param.setUserId(userId);
        
        
        productRepository.save(param);
	}
}
